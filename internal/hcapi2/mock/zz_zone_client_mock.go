// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hetznercloud/cli/internal/hcapi2 (interfaces: ZoneClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination zz_zone_client_mock.go github.com/hetznercloud/cli/internal/hcapi2 ZoneClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"
	gomock "go.uber.org/mock/gomock"
)

// MockZoneClient is a mock of ZoneClient interface.
type MockZoneClient struct {
	ctrl     *gomock.Controller
	recorder *MockZoneClientMockRecorder
	isgomock struct{}
}

// MockZoneClientMockRecorder is the mock recorder for MockZoneClient.
type MockZoneClientMockRecorder struct {
	mock *MockZoneClient
}

// NewMockZoneClient creates a new mock instance.
func NewMockZoneClient(ctrl *gomock.Controller) *MockZoneClient {
	mock := &MockZoneClient{ctrl: ctrl}
	mock.recorder = &MockZoneClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZoneClient) EXPECT() *MockZoneClientMockRecorder {
	return m.recorder
}

// AddRRSetRecords mocks base method.
func (m *MockZoneClient) AddRRSetRecords(ctx context.Context, rrset *hcloud.ZoneRRSet, opts hcloud.ZoneRRSetAddRecordsOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRRSetRecords", ctx, rrset, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddRRSetRecords indicates an expected call of AddRRSetRecords.
func (mr *MockZoneClientMockRecorder) AddRRSetRecords(ctx, rrset, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRRSetRecords", reflect.TypeOf((*MockZoneClient)(nil).AddRRSetRecords), ctx, rrset, opts)
}

// All mocks base method.
func (m *MockZoneClient) All(ctx context.Context) ([]*hcloud.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]*hcloud.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockZoneClientMockRecorder) All(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockZoneClient)(nil).All), ctx)
}

// AllRRSets mocks base method.
func (m *MockZoneClient) AllRRSets(ctx context.Context, zone *hcloud.Zone) ([]*hcloud.ZoneRRSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRRSets", ctx, zone)
	ret0, _ := ret[0].([]*hcloud.ZoneRRSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRRSets indicates an expected call of AllRRSets.
func (mr *MockZoneClientMockRecorder) AllRRSets(ctx, zone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRRSets", reflect.TypeOf((*MockZoneClient)(nil).AllRRSets), ctx, zone)
}

// AllRRSetsWithOpts mocks base method.
func (m *MockZoneClient) AllRRSetsWithOpts(ctx context.Context, zone *hcloud.Zone, opts hcloud.ZoneRRSetListOpts) ([]*hcloud.ZoneRRSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllRRSetsWithOpts", ctx, zone, opts)
	ret0, _ := ret[0].([]*hcloud.ZoneRRSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllRRSetsWithOpts indicates an expected call of AllRRSetsWithOpts.
func (mr *MockZoneClientMockRecorder) AllRRSetsWithOpts(ctx, zone, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRRSetsWithOpts", reflect.TypeOf((*MockZoneClient)(nil).AllRRSetsWithOpts), ctx, zone, opts)
}

// AllWithOpts mocks base method.
func (m *MockZoneClient) AllWithOpts(ctx context.Context, opts hcloud.ZoneListOpts) ([]*hcloud.Zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithOpts", ctx, opts)
	ret0, _ := ret[0].([]*hcloud.Zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithOpts indicates an expected call of AllWithOpts.
func (mr *MockZoneClientMockRecorder) AllWithOpts(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithOpts", reflect.TypeOf((*MockZoneClient)(nil).AllWithOpts), ctx, opts)
}

// ChangePrimaryNameservers mocks base method.
func (m *MockZoneClient) ChangePrimaryNameservers(ctx context.Context, zone *hcloud.Zone, opts hcloud.ZoneChangePrimaryNameserversOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePrimaryNameservers", ctx, zone, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangePrimaryNameservers indicates an expected call of ChangePrimaryNameservers.
func (mr *MockZoneClientMockRecorder) ChangePrimaryNameservers(ctx, zone, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePrimaryNameservers", reflect.TypeOf((*MockZoneClient)(nil).ChangePrimaryNameservers), ctx, zone, opts)
}

// ChangeProtection mocks base method.
func (m *MockZoneClient) ChangeProtection(ctx context.Context, zone *hcloud.Zone, opts hcloud.ZoneChangeProtectionOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeProtection", ctx, zone, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeProtection indicates an expected call of ChangeProtection.
func (mr *MockZoneClientMockRecorder) ChangeProtection(ctx, zone, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeProtection", reflect.TypeOf((*MockZoneClient)(nil).ChangeProtection), ctx, zone, opts)
}

// ChangeRRSetProtection mocks base method.
func (m *MockZoneClient) ChangeRRSetProtection(ctx context.Context, rrset *hcloud.ZoneRRSet, opts hcloud.ZoneRRSetChangeProtectionOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeRRSetProtection", ctx, rrset, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeRRSetProtection indicates an expected call of ChangeRRSetProtection.
func (mr *MockZoneClientMockRecorder) ChangeRRSetProtection(ctx, rrset, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeRRSetProtection", reflect.TypeOf((*MockZoneClient)(nil).ChangeRRSetProtection), ctx, rrset, opts)
}

// ChangeRRSetTTL mocks base method.
func (m *MockZoneClient) ChangeRRSetTTL(ctx context.Context, rrset *hcloud.ZoneRRSet, opts hcloud.ZoneRRSetChangeTTLOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeRRSetTTL", ctx, rrset, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeRRSetTTL indicates an expected call of ChangeRRSetTTL.
func (mr *MockZoneClientMockRecorder) ChangeRRSetTTL(ctx, rrset, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeRRSetTTL", reflect.TypeOf((*MockZoneClient)(nil).ChangeRRSetTTL), ctx, rrset, opts)
}

// ChangeTTL mocks base method.
func (m *MockZoneClient) ChangeTTL(ctx context.Context, zone *hcloud.Zone, opts hcloud.ZoneChangeTTLOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeTTL", ctx, zone, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeTTL indicates an expected call of ChangeTTL.
func (mr *MockZoneClientMockRecorder) ChangeTTL(ctx, zone, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTTL", reflect.TypeOf((*MockZoneClient)(nil).ChangeTTL), ctx, zone, opts)
}

// Create mocks base method.
func (m *MockZoneClient) Create(ctx context.Context, opts hcloud.ZoneCreateOpts) (hcloud.ZoneCreateResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, opts)
	ret0, _ := ret[0].(hcloud.ZoneCreateResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockZoneClientMockRecorder) Create(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockZoneClient)(nil).Create), ctx, opts)
}

// CreateRRSet mocks base method.
func (m *MockZoneClient) CreateRRSet(ctx context.Context, zone *hcloud.Zone, opts hcloud.ZoneRRSetCreateOpts) (hcloud.ZoneRRSetCreateResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRRSet", ctx, zone, opts)
	ret0, _ := ret[0].(hcloud.ZoneRRSetCreateResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRRSet indicates an expected call of CreateRRSet.
func (mr *MockZoneClientMockRecorder) CreateRRSet(ctx, zone, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRRSet", reflect.TypeOf((*MockZoneClient)(nil).CreateRRSet), ctx, zone, opts)
}

// Delete mocks base method.
func (m *MockZoneClient) Delete(ctx context.Context, zone *hcloud.Zone) (hcloud.ZoneDeleteResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, zone)
	ret0, _ := ret[0].(hcloud.ZoneDeleteResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Delete indicates an expected call of Delete.
func (mr *MockZoneClientMockRecorder) Delete(ctx, zone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockZoneClient)(nil).Delete), ctx, zone)
}

// DeleteRRSet mocks base method.
func (m *MockZoneClient) DeleteRRSet(ctx context.Context, rrset *hcloud.ZoneRRSet) (hcloud.ZoneRRSetDeleteResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRRSet", ctx, rrset)
	ret0, _ := ret[0].(hcloud.ZoneRRSetDeleteResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteRRSet indicates an expected call of DeleteRRSet.
func (mr *MockZoneClientMockRecorder) DeleteRRSet(ctx, rrset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRRSet", reflect.TypeOf((*MockZoneClient)(nil).DeleteRRSet), ctx, rrset)
}

// ExportZonefile mocks base method.
func (m *MockZoneClient) ExportZonefile(ctx context.Context, zone *hcloud.Zone) (hcloud.ZoneExportZonefileResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportZonefile", ctx, zone)
	ret0, _ := ret[0].(hcloud.ZoneExportZonefileResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExportZonefile indicates an expected call of ExportZonefile.
func (mr *MockZoneClientMockRecorder) ExportZonefile(ctx, zone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportZonefile", reflect.TypeOf((*MockZoneClient)(nil).ExportZonefile), ctx, zone)
}

// Get mocks base method.
func (m *MockZoneClient) Get(ctx context.Context, idOrName string) (*hcloud.Zone, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, idOrName)
	ret0, _ := ret[0].(*hcloud.Zone)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockZoneClientMockRecorder) Get(ctx, idOrName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockZoneClient)(nil).Get), ctx, idOrName)
}

// GetByID mocks base method.
func (m *MockZoneClient) GetByID(ctx context.Context, id int64) (*hcloud.Zone, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*hcloud.Zone)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockZoneClientMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockZoneClient)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockZoneClient) GetByName(ctx context.Context, name string) (*hcloud.Zone, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*hcloud.Zone)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByName indicates an expected call of GetByName.
func (mr *MockZoneClientMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockZoneClient)(nil).GetByName), ctx, name)
}

// GetRRSetByID mocks base method.
func (m *MockZoneClient) GetRRSetByID(ctx context.Context, zone *hcloud.Zone, rrsetID string) (*hcloud.ZoneRRSet, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRRSetByID", ctx, zone, rrsetID)
	ret0, _ := ret[0].(*hcloud.ZoneRRSet)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRRSetByID indicates an expected call of GetRRSetByID.
func (mr *MockZoneClientMockRecorder) GetRRSetByID(ctx, zone, rrsetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRRSetByID", reflect.TypeOf((*MockZoneClient)(nil).GetRRSetByID), ctx, zone, rrsetID)
}

// GetRRSetByNameAndType mocks base method.
func (m *MockZoneClient) GetRRSetByNameAndType(ctx context.Context, zone *hcloud.Zone, rrsetName string, rrsetType hcloud.ZoneRRSetType) (*hcloud.ZoneRRSet, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRRSetByNameAndType", ctx, zone, rrsetName, rrsetType)
	ret0, _ := ret[0].(*hcloud.ZoneRRSet)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRRSetByNameAndType indicates an expected call of GetRRSetByNameAndType.
func (mr *MockZoneClientMockRecorder) GetRRSetByNameAndType(ctx, zone, rrsetName, rrsetType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRRSetByNameAndType", reflect.TypeOf((*MockZoneClient)(nil).GetRRSetByNameAndType), ctx, zone, rrsetName, rrsetType)
}

// ImportZonefile mocks base method.
func (m *MockZoneClient) ImportZonefile(ctx context.Context, zone *hcloud.Zone, opts hcloud.ZoneImportZonefileOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportZonefile", ctx, zone, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ImportZonefile indicates an expected call of ImportZonefile.
func (mr *MockZoneClientMockRecorder) ImportZonefile(ctx, zone, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportZonefile", reflect.TypeOf((*MockZoneClient)(nil).ImportZonefile), ctx, zone, opts)
}

// LabelKeys mocks base method.
func (m *MockZoneClient) LabelKeys(idOrName string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelKeys", idOrName)
	ret0, _ := ret[0].([]string)
	return ret0
}

// LabelKeys indicates an expected call of LabelKeys.
func (mr *MockZoneClientMockRecorder) LabelKeys(idOrName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelKeys", reflect.TypeOf((*MockZoneClient)(nil).LabelKeys), idOrName)
}

// List mocks base method.
func (m *MockZoneClient) List(ctx context.Context, opts hcloud.ZoneListOpts) ([]*hcloud.Zone, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]*hcloud.Zone)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockZoneClientMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockZoneClient)(nil).List), ctx, opts)
}

// ListRRSets mocks base method.
func (m *MockZoneClient) ListRRSets(ctx context.Context, zone *hcloud.Zone, opts hcloud.ZoneRRSetListOpts) ([]*hcloud.ZoneRRSet, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRRSets", ctx, zone, opts)
	ret0, _ := ret[0].([]*hcloud.ZoneRRSet)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRRSets indicates an expected call of ListRRSets.
func (mr *MockZoneClientMockRecorder) ListRRSets(ctx, zone, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRRSets", reflect.TypeOf((*MockZoneClient)(nil).ListRRSets), ctx, zone, opts)
}

// Names mocks base method.
func (m *MockZoneClient) Names() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Names")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Names indicates an expected call of Names.
func (mr *MockZoneClientMockRecorder) Names() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Names", reflect.TypeOf((*MockZoneClient)(nil).Names))
}

// RRSetLabelKeys mocks base method.
func (m *MockZoneClient) RRSetLabelKeys(zoneIDOrName, rrsetName string, rrsetType hcloud.ZoneRRSetType) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RRSetLabelKeys", zoneIDOrName, rrsetName, rrsetType)
	ret0, _ := ret[0].([]string)
	return ret0
}

// RRSetLabelKeys indicates an expected call of RRSetLabelKeys.
func (mr *MockZoneClientMockRecorder) RRSetLabelKeys(zoneIDOrName, rrsetName, rrsetType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RRSetLabelKeys", reflect.TypeOf((*MockZoneClient)(nil).RRSetLabelKeys), zoneIDOrName, rrsetName, rrsetType)
}

// RemoveRRSetRecords mocks base method.
func (m *MockZoneClient) RemoveRRSetRecords(ctx context.Context, rrset *hcloud.ZoneRRSet, opts hcloud.ZoneRRSetRemoveRecordsOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRRSetRecords", ctx, rrset, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RemoveRRSetRecords indicates an expected call of RemoveRRSetRecords.
func (mr *MockZoneClientMockRecorder) RemoveRRSetRecords(ctx, rrset, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRRSetRecords", reflect.TypeOf((*MockZoneClient)(nil).RemoveRRSetRecords), ctx, rrset, opts)
}

// SetRRSetRecords mocks base method.
func (m *MockZoneClient) SetRRSetRecords(ctx context.Context, rrset *hcloud.ZoneRRSet, opts hcloud.ZoneRRSetSetRecordsOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRRSetRecords", ctx, rrset, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetRRSetRecords indicates an expected call of SetRRSetRecords.
func (mr *MockZoneClientMockRecorder) SetRRSetRecords(ctx, rrset, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRRSetRecords", reflect.TypeOf((*MockZoneClient)(nil).SetRRSetRecords), ctx, rrset, opts)
}

// Update mocks base method.
func (m *MockZoneClient) Update(ctx context.Context, zone *hcloud.Zone, opts hcloud.ZoneUpdateOpts) (*hcloud.Zone, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, zone, opts)
	ret0, _ := ret[0].(*hcloud.Zone)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockZoneClientMockRecorder) Update(ctx, zone, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockZoneClient)(nil).Update), ctx, zone, opts)
}

// UpdateRRSet mocks base method.
func (m *MockZoneClient) UpdateRRSet(ctx context.Context, rrset *hcloud.ZoneRRSet, opts hcloud.ZoneRRSetUpdateOpts) (*hcloud.ZoneRRSet, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRRSet", ctx, rrset, opts)
	ret0, _ := ret[0].(*hcloud.ZoneRRSet)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateRRSet indicates an expected call of UpdateRRSet.
func (mr *MockZoneClientMockRecorder) UpdateRRSet(ctx, rrset, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRRSet", reflect.TypeOf((*MockZoneClient)(nil).UpdateRRSet), ctx, rrset, opts)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hetznercloud/cli/internal/hcapi2 (interfaces: StorageBoxClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination zz_storage_box_client_mock.go github.com/hetznercloud/cli/internal/hcapi2 StorageBoxClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageBoxClient is a mock of StorageBoxClient interface.
type MockStorageBoxClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageBoxClientMockRecorder
	isgomock struct{}
}

// MockStorageBoxClientMockRecorder is the mock recorder for MockStorageBoxClient.
type MockStorageBoxClientMockRecorder struct {
	mock *MockStorageBoxClient
}

// NewMockStorageBoxClient creates a new mock instance.
func NewMockStorageBoxClient(ctrl *gomock.Controller) *MockStorageBoxClient {
	mock := &MockStorageBoxClient{ctrl: ctrl}
	mock.recorder = &MockStorageBoxClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageBoxClient) EXPECT() *MockStorageBoxClientMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockStorageBoxClient) All(ctx context.Context) ([]*hcloud.StorageBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]*hcloud.StorageBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockStorageBoxClientMockRecorder) All(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockStorageBoxClient)(nil).All), ctx)
}

// AllWithOpts mocks base method.
func (m *MockStorageBoxClient) AllWithOpts(ctx context.Context, opts hcloud.StorageBoxListOpts) ([]*hcloud.StorageBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithOpts", ctx, opts)
	ret0, _ := ret[0].([]*hcloud.StorageBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithOpts indicates an expected call of AllWithOpts.
func (mr *MockStorageBoxClientMockRecorder) AllWithOpts(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithOpts", reflect.TypeOf((*MockStorageBoxClient)(nil).AllWithOpts), ctx, opts)
}

// ChangeProtection mocks base method.
func (m *MockStorageBoxClient) ChangeProtection(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxChangeProtectionOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeProtection", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeProtection indicates an expected call of ChangeProtection.
func (mr *MockStorageBoxClientMockRecorder) ChangeProtection(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeProtection", reflect.TypeOf((*MockStorageBoxClient)(nil).ChangeProtection), ctx, storageBox, opts)
}

// ChangeType mocks base method.
func (m *MockStorageBoxClient) ChangeType(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxChangeTypeOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeType", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeType indicates an expected call of ChangeType.
func (mr *MockStorageBoxClientMockRecorder) ChangeType(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeType", reflect.TypeOf((*MockStorageBoxClient)(nil).ChangeType), ctx, storageBox, opts)
}

// Create mocks base method.
func (m *MockStorageBoxClient) Create(ctx context.Context, opts hcloud.StorageBoxCreateOpts) (hcloud.StorageBoxCreateResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, opts)
	ret0, _ := ret[0].(hcloud.StorageBoxCreateResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockStorageBoxClientMockRecorder) Create(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorageBoxClient)(nil).Create), ctx, opts)
}

// Delete mocks base method.
func (m *MockStorageBoxClient) Delete(ctx context.Context, storageBox *hcloud.StorageBox) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, storageBox)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageBoxClientMockRecorder) Delete(ctx, storageBox any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageBoxClient)(nil).Delete), ctx, storageBox)
}

// DisableSnapshotPlan mocks base method.
func (m *MockStorageBoxClient) DisableSnapshotPlan(ctx context.Context, storageBox *hcloud.StorageBox) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableSnapshotPlan", ctx, storageBox)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DisableSnapshotPlan indicates an expected call of DisableSnapshotPlan.
func (mr *MockStorageBoxClientMockRecorder) DisableSnapshotPlan(ctx, storageBox any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSnapshotPlan", reflect.TypeOf((*MockStorageBoxClient)(nil).DisableSnapshotPlan), ctx, storageBox)
}

// EnableSnapshotPlan mocks base method.
func (m *MockStorageBoxClient) EnableSnapshotPlan(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxEnableSnapshotPlanOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableSnapshotPlan", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnableSnapshotPlan indicates an expected call of EnableSnapshotPlan.
func (mr *MockStorageBoxClientMockRecorder) EnableSnapshotPlan(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSnapshotPlan", reflect.TypeOf((*MockStorageBoxClient)(nil).EnableSnapshotPlan), ctx, storageBox, opts)
}

// Folders mocks base method.
func (m *MockStorageBoxClient) Folders(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxFoldersOpts) (hcloud.StorageBoxFoldersResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Folders", ctx, storageBox, opts)
	ret0, _ := ret[0].(hcloud.StorageBoxFoldersResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Folders indicates an expected call of Folders.
func (mr *MockStorageBoxClientMockRecorder) Folders(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Folders", reflect.TypeOf((*MockStorageBoxClient)(nil).Folders), ctx, storageBox, opts)
}

// Get mocks base method.
func (m *MockStorageBoxClient) Get(ctx context.Context, idOrName string) (*hcloud.StorageBox, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, idOrName)
	ret0, _ := ret[0].(*hcloud.StorageBox)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockStorageBoxClientMockRecorder) Get(ctx, idOrName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageBoxClient)(nil).Get), ctx, idOrName)
}

// GetByID mocks base method.
func (m *MockStorageBoxClient) GetByID(ctx context.Context, id int64) (*hcloud.StorageBox, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*hcloud.StorageBox)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStorageBoxClientMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStorageBoxClient)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockStorageBoxClient) GetByName(ctx context.Context, name string) (*hcloud.StorageBox, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*hcloud.StorageBox)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByName indicates an expected call of GetByName.
func (mr *MockStorageBoxClientMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockStorageBoxClient)(nil).GetByName), ctx, name)
}

// LabelKeys mocks base method.
func (m *MockStorageBoxClient) LabelKeys(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelKeys", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// LabelKeys indicates an expected call of LabelKeys.
func (mr *MockStorageBoxClientMockRecorder) LabelKeys(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelKeys", reflect.TypeOf((*MockStorageBoxClient)(nil).LabelKeys), arg0)
}

// List mocks base method.
func (m *MockStorageBoxClient) List(ctx context.Context, opts hcloud.StorageBoxListOpts) ([]*hcloud.StorageBox, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]*hcloud.StorageBox)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockStorageBoxClientMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorageBoxClient)(nil).List), ctx, opts)
}

// Names mocks base method.
func (m *MockStorageBoxClient) Names() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Names")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Names indicates an expected call of Names.
func (mr *MockStorageBoxClientMockRecorder) Names() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Names", reflect.TypeOf((*MockStorageBoxClient)(nil).Names))
}

// ResetPassword mocks base method.
func (m *MockStorageBoxClient) ResetPassword(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxResetPasswordOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockStorageBoxClientMockRecorder) ResetPassword(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockStorageBoxClient)(nil).ResetPassword), ctx, storageBox, opts)
}

// RollbackSnapshot mocks base method.
func (m *MockStorageBoxClient) RollbackSnapshot(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxRollbackSnapshotOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackSnapshot", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollbackSnapshot indicates an expected call of RollbackSnapshot.
func (mr *MockStorageBoxClientMockRecorder) RollbackSnapshot(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackSnapshot", reflect.TypeOf((*MockStorageBoxClient)(nil).RollbackSnapshot), ctx, storageBox, opts)
}

// Update mocks base method.
func (m *MockStorageBoxClient) Update(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxUpdateOpts) (*hcloud.StorageBox, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.StorageBox)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockStorageBoxClientMockRecorder) Update(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorageBoxClient)(nil).Update), ctx, storageBox, opts)
}

// UpdateAccessSettings mocks base method.
func (m *MockStorageBoxClient) UpdateAccessSettings(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxUpdateAccessSettingsOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessSettings", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAccessSettings indicates an expected call of UpdateAccessSettings.
func (mr *MockStorageBoxClientMockRecorder) UpdateAccessSettings(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessSettings", reflect.TypeOf((*MockStorageBoxClient)(nil).UpdateAccessSettings), ctx, storageBox, opts)
}

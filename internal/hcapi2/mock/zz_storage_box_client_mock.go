// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hetznercloud/cli/internal/hcapi2 (interfaces: StorageBoxClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination zz_storage_box_client_mock.go github.com/hetznercloud/cli/internal/hcapi2 StorageBoxClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageBoxClient is a mock of StorageBoxClient interface.
type MockStorageBoxClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageBoxClientMockRecorder
	isgomock struct{}
}

// MockStorageBoxClientMockRecorder is the mock recorder for MockStorageBoxClient.
type MockStorageBoxClientMockRecorder struct {
	mock *MockStorageBoxClient
}

// NewMockStorageBoxClient creates a new mock instance.
func NewMockStorageBoxClient(ctrl *gomock.Controller) *MockStorageBoxClient {
	mock := &MockStorageBoxClient{ctrl: ctrl}
	mock.recorder = &MockStorageBoxClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageBoxClient) EXPECT() *MockStorageBoxClientMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockStorageBoxClient) All(ctx context.Context) ([]*hcloud.StorageBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]*hcloud.StorageBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockStorageBoxClientMockRecorder) All(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockStorageBoxClient)(nil).All), ctx)
}

// AllSnapshots mocks base method.
func (m *MockStorageBoxClient) AllSnapshots(ctx context.Context, storageBox *hcloud.StorageBox) ([]*hcloud.StorageBoxSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSnapshots", ctx, storageBox)
	ret0, _ := ret[0].([]*hcloud.StorageBoxSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSnapshots indicates an expected call of AllSnapshots.
func (mr *MockStorageBoxClientMockRecorder) AllSnapshots(ctx, storageBox any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSnapshots", reflect.TypeOf((*MockStorageBoxClient)(nil).AllSnapshots), ctx, storageBox)
}

// AllSnapshotsWithOpts mocks base method.
func (m *MockStorageBoxClient) AllSnapshotsWithOpts(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxSnapshotListOpts) ([]*hcloud.StorageBoxSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSnapshotsWithOpts", ctx, storageBox, opts)
	ret0, _ := ret[0].([]*hcloud.StorageBoxSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSnapshotsWithOpts indicates an expected call of AllSnapshotsWithOpts.
func (mr *MockStorageBoxClientMockRecorder) AllSnapshotsWithOpts(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSnapshotsWithOpts", reflect.TypeOf((*MockStorageBoxClient)(nil).AllSnapshotsWithOpts), ctx, storageBox, opts)
}

// AllSubaccounts mocks base method.
func (m *MockStorageBoxClient) AllSubaccounts(ctx context.Context, storageBox *hcloud.StorageBox) ([]*hcloud.StorageBoxSubaccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSubaccounts", ctx, storageBox)
	ret0, _ := ret[0].([]*hcloud.StorageBoxSubaccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSubaccounts indicates an expected call of AllSubaccounts.
func (mr *MockStorageBoxClientMockRecorder) AllSubaccounts(ctx, storageBox any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSubaccounts", reflect.TypeOf((*MockStorageBoxClient)(nil).AllSubaccounts), ctx, storageBox)
}

// AllSubaccountsWithOpts mocks base method.
func (m *MockStorageBoxClient) AllSubaccountsWithOpts(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxSubaccountListOpts) ([]*hcloud.StorageBoxSubaccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSubaccountsWithOpts", ctx, storageBox, opts)
	ret0, _ := ret[0].([]*hcloud.StorageBoxSubaccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSubaccountsWithOpts indicates an expected call of AllSubaccountsWithOpts.
func (mr *MockStorageBoxClientMockRecorder) AllSubaccountsWithOpts(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSubaccountsWithOpts", reflect.TypeOf((*MockStorageBoxClient)(nil).AllSubaccountsWithOpts), ctx, storageBox, opts)
}

// AllWithOpts mocks base method.
func (m *MockStorageBoxClient) AllWithOpts(ctx context.Context, opts hcloud.StorageBoxListOpts) ([]*hcloud.StorageBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithOpts", ctx, opts)
	ret0, _ := ret[0].([]*hcloud.StorageBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithOpts indicates an expected call of AllWithOpts.
func (mr *MockStorageBoxClientMockRecorder) AllWithOpts(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithOpts", reflect.TypeOf((*MockStorageBoxClient)(nil).AllWithOpts), ctx, opts)
}

// ChangeProtection mocks base method.
func (m *MockStorageBoxClient) ChangeProtection(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxChangeProtectionOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeProtection", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeProtection indicates an expected call of ChangeProtection.
func (mr *MockStorageBoxClientMockRecorder) ChangeProtection(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeProtection", reflect.TypeOf((*MockStorageBoxClient)(nil).ChangeProtection), ctx, storageBox, opts)
}

// ChangeSubaccountHomeDirectory mocks base method.
func (m *MockStorageBoxClient) ChangeSubaccountHomeDirectory(ctx context.Context, subaccount *hcloud.StorageBoxSubaccount, opts hcloud.StorageBoxSubaccountChangeHomeDirectoryOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSubaccountHomeDirectory", ctx, subaccount, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeSubaccountHomeDirectory indicates an expected call of ChangeSubaccountHomeDirectory.
func (mr *MockStorageBoxClientMockRecorder) ChangeSubaccountHomeDirectory(ctx, subaccount, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSubaccountHomeDirectory", reflect.TypeOf((*MockStorageBoxClient)(nil).ChangeSubaccountHomeDirectory), ctx, subaccount, opts)
}

// ChangeType mocks base method.
func (m *MockStorageBoxClient) ChangeType(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxChangeTypeOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeType", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeType indicates an expected call of ChangeType.
func (mr *MockStorageBoxClientMockRecorder) ChangeType(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeType", reflect.TypeOf((*MockStorageBoxClient)(nil).ChangeType), ctx, storageBox, opts)
}

// Create mocks base method.
func (m *MockStorageBoxClient) Create(ctx context.Context, opts hcloud.StorageBoxCreateOpts) (hcloud.StorageBoxCreateResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, opts)
	ret0, _ := ret[0].(hcloud.StorageBoxCreateResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockStorageBoxClientMockRecorder) Create(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorageBoxClient)(nil).Create), ctx, opts)
}

// CreateSnapshot mocks base method.
func (m *MockStorageBoxClient) CreateSnapshot(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxSnapshotCreateOpts) (hcloud.StorageBoxSnapshotCreateResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", ctx, storageBox, opts)
	ret0, _ := ret[0].(hcloud.StorageBoxSnapshotCreateResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockStorageBoxClientMockRecorder) CreateSnapshot(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockStorageBoxClient)(nil).CreateSnapshot), ctx, storageBox, opts)
}

// CreateSubaccount mocks base method.
func (m *MockStorageBoxClient) CreateSubaccount(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxSubaccountCreateOpts) (hcloud.StorageBoxSubaccountCreateResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubaccount", ctx, storageBox, opts)
	ret0, _ := ret[0].(hcloud.StorageBoxSubaccountCreateResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSubaccount indicates an expected call of CreateSubaccount.
func (mr *MockStorageBoxClientMockRecorder) CreateSubaccount(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubaccount", reflect.TypeOf((*MockStorageBoxClient)(nil).CreateSubaccount), ctx, storageBox, opts)
}

// Delete mocks base method.
func (m *MockStorageBoxClient) Delete(ctx context.Context, storageBox *hcloud.StorageBox) (hcloud.StorageBoxDeleteResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, storageBox)
	ret0, _ := ret[0].(hcloud.StorageBoxDeleteResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageBoxClientMockRecorder) Delete(ctx, storageBox any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageBoxClient)(nil).Delete), ctx, storageBox)
}

// DeleteSnapshot mocks base method.
func (m *MockStorageBoxClient) DeleteSnapshot(ctx context.Context, snapshot *hcloud.StorageBoxSnapshot) (hcloud.StorageBoxSnapshotDeleteResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", ctx, snapshot)
	ret0, _ := ret[0].(hcloud.StorageBoxSnapshotDeleteResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockStorageBoxClientMockRecorder) DeleteSnapshot(ctx, snapshot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockStorageBoxClient)(nil).DeleteSnapshot), ctx, snapshot)
}

// DeleteSubaccount mocks base method.
func (m *MockStorageBoxClient) DeleteSubaccount(ctx context.Context, subaccount *hcloud.StorageBoxSubaccount) (hcloud.StorageBoxSubaccountDeleteResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubaccount", ctx, subaccount)
	ret0, _ := ret[0].(hcloud.StorageBoxSubaccountDeleteResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteSubaccount indicates an expected call of DeleteSubaccount.
func (mr *MockStorageBoxClientMockRecorder) DeleteSubaccount(ctx, subaccount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubaccount", reflect.TypeOf((*MockStorageBoxClient)(nil).DeleteSubaccount), ctx, subaccount)
}

// DisableSnapshotPlan mocks base method.
func (m *MockStorageBoxClient) DisableSnapshotPlan(ctx context.Context, storageBox *hcloud.StorageBox) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableSnapshotPlan", ctx, storageBox)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DisableSnapshotPlan indicates an expected call of DisableSnapshotPlan.
func (mr *MockStorageBoxClientMockRecorder) DisableSnapshotPlan(ctx, storageBox any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableSnapshotPlan", reflect.TypeOf((*MockStorageBoxClient)(nil).DisableSnapshotPlan), ctx, storageBox)
}

// EnableSnapshotPlan mocks base method.
func (m *MockStorageBoxClient) EnableSnapshotPlan(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxEnableSnapshotPlanOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableSnapshotPlan", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnableSnapshotPlan indicates an expected call of EnableSnapshotPlan.
func (mr *MockStorageBoxClientMockRecorder) EnableSnapshotPlan(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSnapshotPlan", reflect.TypeOf((*MockStorageBoxClient)(nil).EnableSnapshotPlan), ctx, storageBox, opts)
}

// Folders mocks base method.
func (m *MockStorageBoxClient) Folders(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxFoldersOpts) (hcloud.StorageBoxFoldersResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Folders", ctx, storageBox, opts)
	ret0, _ := ret[0].(hcloud.StorageBoxFoldersResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Folders indicates an expected call of Folders.
func (mr *MockStorageBoxClientMockRecorder) Folders(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Folders", reflect.TypeOf((*MockStorageBoxClient)(nil).Folders), ctx, storageBox, opts)
}

// Get mocks base method.
func (m *MockStorageBoxClient) Get(ctx context.Context, idOrName string) (*hcloud.StorageBox, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, idOrName)
	ret0, _ := ret[0].(*hcloud.StorageBox)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockStorageBoxClientMockRecorder) Get(ctx, idOrName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageBoxClient)(nil).Get), ctx, idOrName)
}

// GetByID mocks base method.
func (m *MockStorageBoxClient) GetByID(ctx context.Context, id int64) (*hcloud.StorageBox, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*hcloud.StorageBox)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStorageBoxClientMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStorageBoxClient)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockStorageBoxClient) GetByName(ctx context.Context, name string) (*hcloud.StorageBox, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*hcloud.StorageBox)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByName indicates an expected call of GetByName.
func (mr *MockStorageBoxClientMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockStorageBoxClient)(nil).GetByName), ctx, name)
}

// GetSnapshot mocks base method.
func (m *MockStorageBoxClient) GetSnapshot(ctx context.Context, storageBox *hcloud.StorageBox, idOrName string) (*hcloud.StorageBoxSnapshot, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", ctx, storageBox, idOrName)
	ret0, _ := ret[0].(*hcloud.StorageBoxSnapshot)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockStorageBoxClientMockRecorder) GetSnapshot(ctx, storageBox, idOrName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockStorageBoxClient)(nil).GetSnapshot), ctx, storageBox, idOrName)
}

// GetSnapshotByID mocks base method.
func (m *MockStorageBoxClient) GetSnapshotByID(ctx context.Context, storageBox *hcloud.StorageBox, id int64) (*hcloud.StorageBoxSnapshot, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotByID", ctx, storageBox, id)
	ret0, _ := ret[0].(*hcloud.StorageBoxSnapshot)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSnapshotByID indicates an expected call of GetSnapshotByID.
func (mr *MockStorageBoxClientMockRecorder) GetSnapshotByID(ctx, storageBox, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotByID", reflect.TypeOf((*MockStorageBoxClient)(nil).GetSnapshotByID), ctx, storageBox, id)
}

// GetSnapshotByName mocks base method.
func (m *MockStorageBoxClient) GetSnapshotByName(ctx context.Context, storageBox *hcloud.StorageBox, name string) (*hcloud.StorageBoxSnapshot, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotByName", ctx, storageBox, name)
	ret0, _ := ret[0].(*hcloud.StorageBoxSnapshot)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSnapshotByName indicates an expected call of GetSnapshotByName.
func (mr *MockStorageBoxClientMockRecorder) GetSnapshotByName(ctx, storageBox, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotByName", reflect.TypeOf((*MockStorageBoxClient)(nil).GetSnapshotByName), ctx, storageBox, name)
}

// GetSubaccount mocks base method.
func (m *MockStorageBoxClient) GetSubaccount(ctx context.Context, storageBox *hcloud.StorageBox, idOrUsername string) (*hcloud.StorageBoxSubaccount, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubaccount", ctx, storageBox, idOrUsername)
	ret0, _ := ret[0].(*hcloud.StorageBoxSubaccount)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSubaccount indicates an expected call of GetSubaccount.
func (mr *MockStorageBoxClientMockRecorder) GetSubaccount(ctx, storageBox, idOrUsername any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubaccount", reflect.TypeOf((*MockStorageBoxClient)(nil).GetSubaccount), ctx, storageBox, idOrUsername)
}

// GetSubaccountByID mocks base method.
func (m *MockStorageBoxClient) GetSubaccountByID(ctx context.Context, storageBox *hcloud.StorageBox, id int64) (*hcloud.StorageBoxSubaccount, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubaccountByID", ctx, storageBox, id)
	ret0, _ := ret[0].(*hcloud.StorageBoxSubaccount)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSubaccountByID indicates an expected call of GetSubaccountByID.
func (mr *MockStorageBoxClientMockRecorder) GetSubaccountByID(ctx, storageBox, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubaccountByID", reflect.TypeOf((*MockStorageBoxClient)(nil).GetSubaccountByID), ctx, storageBox, id)
}

// GetSubaccountByUsername mocks base method.
func (m *MockStorageBoxClient) GetSubaccountByUsername(ctx context.Context, storageBox *hcloud.StorageBox, username string) (*hcloud.StorageBoxSubaccount, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubaccountByUsername", ctx, storageBox, username)
	ret0, _ := ret[0].(*hcloud.StorageBoxSubaccount)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSubaccountByUsername indicates an expected call of GetSubaccountByUsername.
func (mr *MockStorageBoxClientMockRecorder) GetSubaccountByUsername(ctx, storageBox, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubaccountByUsername", reflect.TypeOf((*MockStorageBoxClient)(nil).GetSubaccountByUsername), ctx, storageBox, username)
}

// LabelKeys mocks base method.
func (m *MockStorageBoxClient) LabelKeys(arg0 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelKeys", arg0)
	ret0, _ := ret[0].([]string)
	return ret0
}

// LabelKeys indicates an expected call of LabelKeys.
func (mr *MockStorageBoxClientMockRecorder) LabelKeys(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelKeys", reflect.TypeOf((*MockStorageBoxClient)(nil).LabelKeys), arg0)
}

// List mocks base method.
func (m *MockStorageBoxClient) List(ctx context.Context, opts hcloud.StorageBoxListOpts) ([]*hcloud.StorageBox, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]*hcloud.StorageBox)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockStorageBoxClientMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorageBoxClient)(nil).List), ctx, opts)
}

// ListSnapshots mocks base method.
func (m *MockStorageBoxClient) ListSnapshots(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxSnapshotListOpts) ([]*hcloud.StorageBoxSnapshot, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", ctx, storageBox, opts)
	ret0, _ := ret[0].([]*hcloud.StorageBoxSnapshot)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSnapshots indicates an expected call of ListSnapshots.
func (mr *MockStorageBoxClientMockRecorder) ListSnapshots(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockStorageBoxClient)(nil).ListSnapshots), ctx, storageBox, opts)
}

// ListSubaccounts mocks base method.
func (m *MockStorageBoxClient) ListSubaccounts(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxSubaccountListOpts) ([]*hcloud.StorageBoxSubaccount, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubaccounts", ctx, storageBox, opts)
	ret0, _ := ret[0].([]*hcloud.StorageBoxSubaccount)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSubaccounts indicates an expected call of ListSubaccounts.
func (mr *MockStorageBoxClientMockRecorder) ListSubaccounts(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubaccounts", reflect.TypeOf((*MockStorageBoxClient)(nil).ListSubaccounts), ctx, storageBox, opts)
}

// Names mocks base method.
func (m *MockStorageBoxClient) Names() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Names")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Names indicates an expected call of Names.
func (mr *MockStorageBoxClientMockRecorder) Names() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Names", reflect.TypeOf((*MockStorageBoxClient)(nil).Names))
}

// ResetPassword mocks base method.
func (m *MockStorageBoxClient) ResetPassword(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxResetPasswordOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockStorageBoxClientMockRecorder) ResetPassword(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockStorageBoxClient)(nil).ResetPassword), ctx, storageBox, opts)
}

// ResetSubaccountPassword mocks base method.
func (m *MockStorageBoxClient) ResetSubaccountPassword(ctx context.Context, subaccount *hcloud.StorageBoxSubaccount, opts hcloud.StorageBoxSubaccountResetPasswordOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSubaccountPassword", ctx, subaccount, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ResetSubaccountPassword indicates an expected call of ResetSubaccountPassword.
func (mr *MockStorageBoxClientMockRecorder) ResetSubaccountPassword(ctx, subaccount, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSubaccountPassword", reflect.TypeOf((*MockStorageBoxClient)(nil).ResetSubaccountPassword), ctx, subaccount, opts)
}

// RollbackSnapshot mocks base method.
func (m *MockStorageBoxClient) RollbackSnapshot(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxRollbackSnapshotOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackSnapshot", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RollbackSnapshot indicates an expected call of RollbackSnapshot.
func (mr *MockStorageBoxClientMockRecorder) RollbackSnapshot(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackSnapshot", reflect.TypeOf((*MockStorageBoxClient)(nil).RollbackSnapshot), ctx, storageBox, opts)
}

// SnapshotLabelKeys mocks base method.
func (m *MockStorageBoxClient) SnapshotLabelKeys(arg0, arg1 string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnapshotLabelKeys", arg0, arg1)
	ret0, _ := ret[0].([]string)
	return ret0
}

// SnapshotLabelKeys indicates an expected call of SnapshotLabelKeys.
func (mr *MockStorageBoxClientMockRecorder) SnapshotLabelKeys(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnapshotLabelKeys", reflect.TypeOf((*MockStorageBoxClient)(nil).SnapshotLabelKeys), arg0, arg1)
}

// Update mocks base method.
func (m *MockStorageBoxClient) Update(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxUpdateOpts) (*hcloud.StorageBox, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.StorageBox)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockStorageBoxClientMockRecorder) Update(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorageBoxClient)(nil).Update), ctx, storageBox, opts)
}

// UpdateAccessSettings mocks base method.
func (m *MockStorageBoxClient) UpdateAccessSettings(ctx context.Context, storageBox *hcloud.StorageBox, opts hcloud.StorageBoxUpdateAccessSettingsOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessSettings", ctx, storageBox, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAccessSettings indicates an expected call of UpdateAccessSettings.
func (mr *MockStorageBoxClientMockRecorder) UpdateAccessSettings(ctx, storageBox, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessSettings", reflect.TypeOf((*MockStorageBoxClient)(nil).UpdateAccessSettings), ctx, storageBox, opts)
}

// UpdateSnapshot mocks base method.
func (m *MockStorageBoxClient) UpdateSnapshot(ctx context.Context, snapshot *hcloud.StorageBoxSnapshot, opts hcloud.StorageBoxSnapshotUpdateOpts) (*hcloud.StorageBoxSnapshot, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshot", ctx, snapshot, opts)
	ret0, _ := ret[0].(*hcloud.StorageBoxSnapshot)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSnapshot indicates an expected call of UpdateSnapshot.
func (mr *MockStorageBoxClientMockRecorder) UpdateSnapshot(ctx, snapshot, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshot", reflect.TypeOf((*MockStorageBoxClient)(nil).UpdateSnapshot), ctx, snapshot, opts)
}

// UpdateSubaccount mocks base method.
func (m *MockStorageBoxClient) UpdateSubaccount(ctx context.Context, subaccount *hcloud.StorageBoxSubaccount, opts hcloud.StorageBoxSubaccountUpdateOpts) (*hcloud.StorageBoxSubaccount, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubaccount", ctx, subaccount, opts)
	ret0, _ := ret[0].(*hcloud.StorageBoxSubaccount)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSubaccount indicates an expected call of UpdateSubaccount.
func (mr *MockStorageBoxClientMockRecorder) UpdateSubaccount(ctx, subaccount, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubaccount", reflect.TypeOf((*MockStorageBoxClient)(nil).UpdateSubaccount), ctx, subaccount, opts)
}

// UpdateSubaccountAccessSettings mocks base method.
func (m *MockStorageBoxClient) UpdateSubaccountAccessSettings(ctx context.Context, subaccount *hcloud.StorageBoxSubaccount, opts hcloud.StorageBoxSubaccountUpdateAccessSettingsOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubaccountAccessSettings", ctx, subaccount, opts)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSubaccountAccessSettings indicates an expected call of UpdateSubaccountAccessSettings.
func (mr *MockStorageBoxClientMockRecorder) UpdateSubaccountAccessSettings(ctx, subaccount, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubaccountAccessSettings", reflect.TypeOf((*MockStorageBoxClient)(nil).UpdateSubaccountAccessSettings), ctx, subaccount, opts)
}

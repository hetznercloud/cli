// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hetznercloud/cli/internal/hcapi2 (interfaces: StorageBoxTypeClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination zz_storage_box_type_client_mock.go github.com/hetznercloud/cli/internal/hcapi2 StorageBoxTypeClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageBoxTypeClient is a mock of StorageBoxTypeClient interface.
type MockStorageBoxTypeClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageBoxTypeClientMockRecorder
	isgomock struct{}
}

// MockStorageBoxTypeClientMockRecorder is the mock recorder for MockStorageBoxTypeClient.
type MockStorageBoxTypeClientMockRecorder struct {
	mock *MockStorageBoxTypeClient
}

// NewMockStorageBoxTypeClient creates a new mock instance.
func NewMockStorageBoxTypeClient(ctrl *gomock.Controller) *MockStorageBoxTypeClient {
	mock := &MockStorageBoxTypeClient{ctrl: ctrl}
	mock.recorder = &MockStorageBoxTypeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageBoxTypeClient) EXPECT() *MockStorageBoxTypeClientMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockStorageBoxTypeClient) All(ctx context.Context) ([]*hcloud.StorageBoxType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]*hcloud.StorageBoxType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockStorageBoxTypeClientMockRecorder) All(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockStorageBoxTypeClient)(nil).All), ctx)
}

// AllWithOpts mocks base method.
func (m *MockStorageBoxTypeClient) AllWithOpts(ctx context.Context, opts hcloud.StorageBoxTypeListOpts) ([]*hcloud.StorageBoxType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithOpts", ctx, opts)
	ret0, _ := ret[0].([]*hcloud.StorageBoxType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithOpts indicates an expected call of AllWithOpts.
func (mr *MockStorageBoxTypeClientMockRecorder) AllWithOpts(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithOpts", reflect.TypeOf((*MockStorageBoxTypeClient)(nil).AllWithOpts), ctx, opts)
}

// Get mocks base method.
func (m *MockStorageBoxTypeClient) Get(ctx context.Context, idOrName string) (*hcloud.StorageBoxType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, idOrName)
	ret0, _ := ret[0].(*hcloud.StorageBoxType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockStorageBoxTypeClientMockRecorder) Get(ctx, idOrName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageBoxTypeClient)(nil).Get), ctx, idOrName)
}

// GetByID mocks base method.
func (m *MockStorageBoxTypeClient) GetByID(ctx context.Context, id int64) (*hcloud.StorageBoxType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*hcloud.StorageBoxType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStorageBoxTypeClientMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStorageBoxTypeClient)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockStorageBoxTypeClient) GetByName(ctx context.Context, name string) (*hcloud.StorageBoxType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*hcloud.StorageBoxType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByName indicates an expected call of GetByName.
func (mr *MockStorageBoxTypeClientMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockStorageBoxTypeClient)(nil).GetByName), ctx, name)
}

// List mocks base method.
func (m *MockStorageBoxTypeClient) List(ctx context.Context, opts hcloud.StorageBoxTypeListOpts) ([]*hcloud.StorageBoxType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]*hcloud.StorageBoxType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockStorageBoxTypeClientMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorageBoxTypeClient)(nil).List), ctx, opts)
}

// Names mocks base method.
func (m *MockStorageBoxTypeClient) Names() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Names")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Names indicates an expected call of Names.
func (mr *MockStorageBoxTypeClientMockRecorder) Names() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Names", reflect.TypeOf((*MockStorageBoxTypeClient)(nil).Names))
}

// StorageBoxTypeDescription mocks base method.
func (m *MockStorageBoxTypeClient) StorageBoxTypeDescription(id int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageBoxTypeDescription", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// StorageBoxTypeDescription indicates an expected call of StorageBoxTypeDescription.
func (mr *MockStorageBoxTypeClientMockRecorder) StorageBoxTypeDescription(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageBoxTypeDescription", reflect.TypeOf((*MockStorageBoxTypeClient)(nil).StorageBoxTypeDescription), id)
}

// StorageBoxTypeName mocks base method.
func (m *MockStorageBoxTypeClient) StorageBoxTypeName(id int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageBoxTypeName", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// StorageBoxTypeName indicates an expected call of StorageBoxTypeName.
func (mr *MockStorageBoxTypeClientMockRecorder) StorageBoxTypeName(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageBoxTypeName", reflect.TypeOf((*MockStorageBoxTypeClient)(nil).StorageBoxTypeName), id)
}

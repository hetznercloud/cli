// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hetznercloud/cli/internal/hcapi2 (interfaces: RDNSClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"
)

// MockRDNSClient is a mock of RDNSClient interface.
type MockRDNSClient struct {
	ctrl     *gomock.Controller
	recorder *MockRDNSClientMockRecorder
}

// MockRDNSClientMockRecorder is the mock recorder for MockRDNSClient.
type MockRDNSClientMockRecorder struct {
	mock *MockRDNSClient
}

// NewMockRDNSClient creates a new mock instance.
func NewMockRDNSClient(ctrl *gomock.Controller) *MockRDNSClient {
	mock := &MockRDNSClient{ctrl: ctrl}
	mock.recorder = &MockRDNSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRDNSClient) EXPECT() *MockRDNSClientMockRecorder {
	return m.recorder
}

// ChangeDNSPtr mocks base method.
func (m *MockRDNSClient) ChangeDNSPtr(arg0 context.Context, arg1 hcloud.RDNSSupporter, arg2 net.IP, arg3 *string) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeDNSPtr", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeDNSPtr indicates an expected call of ChangeDNSPtr.
func (mr *MockRDNSClientMockRecorder) ChangeDNSPtr(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDNSPtr", reflect.TypeOf((*MockRDNSClient)(nil).ChangeDNSPtr), arg0, arg1, arg2, arg3)
}

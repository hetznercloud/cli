// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hetznercloud/cli/internal/hcapi2 (interfaces: ServerTypeClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination zz_server_type_client_mock.go github.com/hetznercloud/cli/internal/hcapi2 ServerTypeClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"
	gomock "go.uber.org/mock/gomock"
)

// MockServerTypeClient is a mock of ServerTypeClient interface.
type MockServerTypeClient struct {
	ctrl     *gomock.Controller
	recorder *MockServerTypeClientMockRecorder
	isgomock struct{}
}

// MockServerTypeClientMockRecorder is the mock recorder for MockServerTypeClient.
type MockServerTypeClientMockRecorder struct {
	mock *MockServerTypeClient
}

// NewMockServerTypeClient creates a new mock instance.
func NewMockServerTypeClient(ctrl *gomock.Controller) *MockServerTypeClient {
	mock := &MockServerTypeClient{ctrl: ctrl}
	mock.recorder = &MockServerTypeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerTypeClient) EXPECT() *MockServerTypeClientMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockServerTypeClient) All(ctx context.Context) ([]*hcloud.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]*hcloud.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockServerTypeClientMockRecorder) All(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockServerTypeClient)(nil).All), ctx)
}

// AllWithOpts mocks base method.
func (m *MockServerTypeClient) AllWithOpts(ctx context.Context, opts hcloud.ServerTypeListOpts) ([]*hcloud.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithOpts", ctx, opts)
	ret0, _ := ret[0].([]*hcloud.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithOpts indicates an expected call of AllWithOpts.
func (mr *MockServerTypeClientMockRecorder) AllWithOpts(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithOpts", reflect.TypeOf((*MockServerTypeClient)(nil).AllWithOpts), ctx, opts)
}

// Get mocks base method.
func (m *MockServerTypeClient) Get(ctx context.Context, idOrName string) (*hcloud.ServerType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, idOrName)
	ret0, _ := ret[0].(*hcloud.ServerType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockServerTypeClientMockRecorder) Get(ctx, idOrName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServerTypeClient)(nil).Get), ctx, idOrName)
}

// GetByID mocks base method.
func (m *MockServerTypeClient) GetByID(ctx context.Context, id int64) (*hcloud.ServerType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*hcloud.ServerType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServerTypeClientMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockServerTypeClient)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockServerTypeClient) GetByName(ctx context.Context, name string) (*hcloud.ServerType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*hcloud.ServerType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByName indicates an expected call of GetByName.
func (mr *MockServerTypeClientMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockServerTypeClient)(nil).GetByName), ctx, name)
}

// List mocks base method.
func (m *MockServerTypeClient) List(ctx context.Context, opts hcloud.ServerTypeListOpts) ([]*hcloud.ServerType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]*hcloud.ServerType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockServerTypeClientMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServerTypeClient)(nil).List), ctx, opts)
}

// Names mocks base method.
func (m *MockServerTypeClient) Names() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Names")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Names indicates an expected call of Names.
func (mr *MockServerTypeClientMockRecorder) Names() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Names", reflect.TypeOf((*MockServerTypeClient)(nil).Names))
}

// ServerTypeDescription mocks base method.
func (m *MockServerTypeClient) ServerTypeDescription(id int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerTypeDescription", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// ServerTypeDescription indicates an expected call of ServerTypeDescription.
func (mr *MockServerTypeClientMockRecorder) ServerTypeDescription(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerTypeDescription", reflect.TypeOf((*MockServerTypeClient)(nil).ServerTypeDescription), id)
}

// ServerTypeName mocks base method.
func (m *MockServerTypeClient) ServerTypeName(id int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerTypeName", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// ServerTypeName indicates an expected call of ServerTypeName.
func (mr *MockServerTypeClientMockRecorder) ServerTypeName(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerTypeName", reflect.TypeOf((*MockServerTypeClient)(nil).ServerTypeName), id)
}

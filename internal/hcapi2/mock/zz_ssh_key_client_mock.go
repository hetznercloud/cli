// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hetznercloud/cli/internal/hcapi2 (interfaces: SSHKeyClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination zz_ssh_key_client_mock.go github.com/hetznercloud/cli/internal/hcapi2 SSHKeyClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"
	gomock "go.uber.org/mock/gomock"
)

// MockSSHKeyClient is a mock of SSHKeyClient interface.
type MockSSHKeyClient struct {
	ctrl     *gomock.Controller
	recorder *MockSSHKeyClientMockRecorder
	isgomock struct{}
}

// MockSSHKeyClientMockRecorder is the mock recorder for MockSSHKeyClient.
type MockSSHKeyClientMockRecorder struct {
	mock *MockSSHKeyClient
}

// NewMockSSHKeyClient creates a new mock instance.
func NewMockSSHKeyClient(ctrl *gomock.Controller) *MockSSHKeyClient {
	mock := &MockSSHKeyClient{ctrl: ctrl}
	mock.recorder = &MockSSHKeyClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHKeyClient) EXPECT() *MockSSHKeyClientMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockSSHKeyClient) All(ctx context.Context) ([]*hcloud.SSHKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]*hcloud.SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockSSHKeyClientMockRecorder) All(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockSSHKeyClient)(nil).All), ctx)
}

// AllWithOpts mocks base method.
func (m *MockSSHKeyClient) AllWithOpts(ctx context.Context, opts hcloud.SSHKeyListOpts) ([]*hcloud.SSHKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithOpts", ctx, opts)
	ret0, _ := ret[0].([]*hcloud.SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithOpts indicates an expected call of AllWithOpts.
func (mr *MockSSHKeyClientMockRecorder) AllWithOpts(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithOpts", reflect.TypeOf((*MockSSHKeyClient)(nil).AllWithOpts), ctx, opts)
}

// Create mocks base method.
func (m *MockSSHKeyClient) Create(ctx context.Context, opts hcloud.SSHKeyCreateOpts) (*hcloud.SSHKey, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, opts)
	ret0, _ := ret[0].(*hcloud.SSHKey)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockSSHKeyClientMockRecorder) Create(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSSHKeyClient)(nil).Create), ctx, opts)
}

// Delete mocks base method.
func (m *MockSSHKeyClient) Delete(ctx context.Context, sshKey *hcloud.SSHKey) (*hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, sshKey)
	ret0, _ := ret[0].(*hcloud.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSSHKeyClientMockRecorder) Delete(ctx, sshKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSSHKeyClient)(nil).Delete), ctx, sshKey)
}

// Get mocks base method.
func (m *MockSSHKeyClient) Get(ctx context.Context, idOrName string) (*hcloud.SSHKey, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, idOrName)
	ret0, _ := ret[0].(*hcloud.SSHKey)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockSSHKeyClientMockRecorder) Get(ctx, idOrName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSSHKeyClient)(nil).Get), ctx, idOrName)
}

// GetByFingerprint mocks base method.
func (m *MockSSHKeyClient) GetByFingerprint(ctx context.Context, fingerprint string) (*hcloud.SSHKey, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFingerprint", ctx, fingerprint)
	ret0, _ := ret[0].(*hcloud.SSHKey)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByFingerprint indicates an expected call of GetByFingerprint.
func (mr *MockSSHKeyClientMockRecorder) GetByFingerprint(ctx, fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFingerprint", reflect.TypeOf((*MockSSHKeyClient)(nil).GetByFingerprint), ctx, fingerprint)
}

// GetByID mocks base method.
func (m *MockSSHKeyClient) GetByID(ctx context.Context, id int64) (*hcloud.SSHKey, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*hcloud.SSHKey)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSSHKeyClientMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSSHKeyClient)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockSSHKeyClient) GetByName(ctx context.Context, name string) (*hcloud.SSHKey, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name)
	ret0, _ := ret[0].(*hcloud.SSHKey)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByName indicates an expected call of GetByName.
func (mr *MockSSHKeyClientMockRecorder) GetByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockSSHKeyClient)(nil).GetByName), ctx, name)
}

// LabelKeys mocks base method.
func (m *MockSSHKeyClient) LabelKeys(idOrName string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelKeys", idOrName)
	ret0, _ := ret[0].([]string)
	return ret0
}

// LabelKeys indicates an expected call of LabelKeys.
func (mr *MockSSHKeyClientMockRecorder) LabelKeys(idOrName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelKeys", reflect.TypeOf((*MockSSHKeyClient)(nil).LabelKeys), idOrName)
}

// List mocks base method.
func (m *MockSSHKeyClient) List(ctx context.Context, opts hcloud.SSHKeyListOpts) ([]*hcloud.SSHKey, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]*hcloud.SSHKey)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockSSHKeyClientMockRecorder) List(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSSHKeyClient)(nil).List), ctx, opts)
}

// Names mocks base method.
func (m *MockSSHKeyClient) Names() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Names")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Names indicates an expected call of Names.
func (mr *MockSSHKeyClientMockRecorder) Names() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Names", reflect.TypeOf((*MockSSHKeyClient)(nil).Names))
}

// Update mocks base method.
func (m *MockSSHKeyClient) Update(ctx context.Context, sshKey *hcloud.SSHKey, opts hcloud.SSHKeyUpdateOpts) (*hcloud.SSHKey, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, sshKey, opts)
	ret0, _ := ret[0].(*hcloud.SSHKey)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockSSHKeyClientMockRecorder) Update(ctx, sshKey, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSSHKeyClient)(nil).Update), ctx, sshKey, opts)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hetznercloud/cli/internal/testutil/terminal (interfaces: Terminal)

// Package terminal is a generated GoMock package.
package terminal

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTerminal is a mock of Terminal interface.
type MockTerminal struct {
	ctrl     *gomock.Controller
	recorder *MockTerminalMockRecorder
}

// MockTerminalMockRecorder is the mock recorder for MockTerminal.
type MockTerminalMockRecorder struct {
	mock *MockTerminal
}

// NewMockTerminal creates a new mock instance.
func NewMockTerminal(ctrl *gomock.Controller) *MockTerminal {
	mock := &MockTerminal{ctrl: ctrl}
	mock.recorder = &MockTerminalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerminal) EXPECT() *MockTerminalMockRecorder {
	return m.recorder
}

// ReadPassword mocks base method.
func (m *MockTerminal) ReadPassword(arg0 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPassword", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPassword indicates an expected call of ReadPassword.
func (mr *MockTerminalMockRecorder) ReadPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPassword", reflect.TypeOf((*MockTerminal)(nil).ReadPassword), arg0)
}

// StdoutIsTerminal mocks base method.
func (m *MockTerminal) StdoutIsTerminal() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdoutIsTerminal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// StdoutIsTerminal indicates an expected call of StdoutIsTerminal.
func (mr *MockTerminalMockRecorder) StdoutIsTerminal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdoutIsTerminal", reflect.TypeOf((*MockTerminal)(nil).StdoutIsTerminal))
}

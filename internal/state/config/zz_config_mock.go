// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hetznercloud/cli/internal/state/config (interfaces: Config)

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// ActiveContext mocks base method.
func (m *MockConfig) ActiveContext() *Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveContext")
	ret0, _ := ret[0].(*Context)
	return ret0
}

// ActiveContext indicates an expected call of ActiveContext.
func (mr *MockConfigMockRecorder) ActiveContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveContext", reflect.TypeOf((*MockConfig)(nil).ActiveContext))
}

// Contexts mocks base method.
func (m *MockConfig) Contexts() []*Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contexts")
	ret0, _ := ret[0].([]*Context)
	return ret0
}

// Contexts indicates an expected call of Contexts.
func (mr *MockConfigMockRecorder) Contexts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contexts", reflect.TypeOf((*MockConfig)(nil).Contexts))
}

// Endpoint mocks base method.
func (m *MockConfig) Endpoint() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoint")
	ret0, _ := ret[0].(string)
	return ret0
}

// Endpoint indicates an expected call of Endpoint.
func (mr *MockConfigMockRecorder) Endpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoint", reflect.TypeOf((*MockConfig)(nil).Endpoint))
}

// SSHPath mocks base method.
func (m *MockConfig) SSHPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// SSHPath indicates an expected call of SSHPath.
func (mr *MockConfigMockRecorder) SSHPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHPath", reflect.TypeOf((*MockConfig)(nil).SSHPath))
}

// SetActiveContext mocks base method.
func (m *MockConfig) SetActiveContext(arg0 *Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActiveContext", arg0)
}

// SetActiveContext indicates an expected call of SetActiveContext.
func (mr *MockConfigMockRecorder) SetActiveContext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveContext", reflect.TypeOf((*MockConfig)(nil).SetActiveContext), arg0)
}

// SetContexts mocks base method.
func (m *MockConfig) SetContexts(arg0 []*Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContexts", arg0)
}

// SetContexts indicates an expected call of SetContexts.
func (mr *MockConfigMockRecorder) SetContexts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContexts", reflect.TypeOf((*MockConfig)(nil).SetContexts), arg0)
}

// SetEndpoint mocks base method.
func (m *MockConfig) SetEndpoint(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEndpoint", arg0)
}

// SetEndpoint indicates an expected call of SetEndpoint.
func (mr *MockConfigMockRecorder) SetEndpoint(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEndpoint", reflect.TypeOf((*MockConfig)(nil).SetEndpoint), arg0)
}

// Write mocks base method.
func (m *MockConfig) Write() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write")
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockConfigMockRecorder) Write() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockConfig)(nil).Write))
}
